@use 'sass:map';
@use '@material/tokens/v0_161' as mdc-tokens;
@use '../style/sass-utils';
@use '@angular/material' as mat;
@use './m3';
@use '../tokens/m2' as m2-tokens;
@use './density';
@use './format-tokens';

/// Generates tokens for the given palette with the given prefix.
/// @param {Map} $palette The palette to generate tokens for
/// @param {String} $prefix The key prefix used to name the tokens
/// @return {Map} A set of tokens for the given palette
@function _generate-palette-tokens($palette, $prefix) {
  $palette: map.remove($palette, neutral, neutral-variant);
  $result: ();
  @each $hue, $value in $palette {
    $result: map.set($result, '#{$prefix}#{$hue}', $value);
  }
  @return $result;
}

/// Creates a set of `md-ref-palette` tokens from the given palettes. (See
/// https://github.com/material-components/material-components-web/blob/master/packages/mdc-tokens/v0_161/_md-ref-palette.scss)
/// @param {Map} $primary The primary palette
/// @param {Map} $secondary The secondary palette
/// @param {Map} $tertiary The tertiary palette
/// @param {Map} $error The error palette
/// @return {Map} A set of `md-ref-palette` tokens
@function _generate-ref-palette-tokens($primary, $tertiary, $error) {
  @return mat.private-merge-all(
      (black: #000, white: #fff),
      _generate-palette-tokens($primary, primary),
      _generate-palette-tokens(map.get($primary, secondary), secondary),
      _generate-palette-tokens($tertiary, tertiary),
      _generate-palette-tokens(map.get($primary, neutral), neutral),
      _generate-palette-tokens(map.get($primary, neutral-variant), neutral-variant),
      _generate-palette-tokens($error, error),
  );
}

/// Creates a set of `md-ref-typeface` tokens from the given palettes. (See
/// https://github.com/material-components/material-components-web/blob/master/packages/mdc-tokens/v0_161/_md-ref-typeface.scss)
/// @param {List|String} $brand The font-family to use for brand text
/// @param {List|String} $plain The font-family to use for plain text
/// @param {String} $bold The font-weight to use for bold text
/// @param {String} $medium The font-weight to use for medium text
/// @param {String} $regular The font-weight to use for regular text
/// @return {Map} A set of `md-ref-typeface` tokens
@function _generate-ref-typeface-tokens($brand, $plain, $bold, $medium, $regular) {
  @return (
    brand: $brand,
    plain: $plain,
    weight-bold: $bold,
    weight-medium: $medium,
    weight-regular: $regular,
  );
}

$_cached-token-slots: null;

/// Determines the token slots for all components.
@function _get-token-slots() {
  // Cache the slots since they're constant and calculating
  // them appears to be expensive (see #29009).
  @if ($_cached-token-slots) {
    @return $_cached-token-slots;
  }

  // TODO(mmalerba): Refactor this to not depend on the legacy theme when moving out of
  //  material-experimental. This is a hack for now because there is no good way to get the token
  //  slots in material-experimental without exposing them all from material.
  $fake-theme: mat.m2-define-light-theme((
    color: (
      primary: mat.m2-define-palette(mat.$m2-red-palette),
      accent: mat.m2-define-palette(mat.$m2-red-palette),
      warn: mat.m2-define-palette(mat.$m2-red-palette),
    ),
    typography: mat.m2-define-typography-config(),
    density: 0
  ));
  $_cached-token-slots: m2-tokens.m2-tokens-from-theme($fake-theme) !global;
  @return $_cached-token-slots;
}

/// Generates a set of namespaced tokens for all components.
/// @param {Map} $systems The MDC system tokens
/// @param {Boolean} $include-non-systemized Whether to include non-systemized tokens
/// @return {Map} A map of namespaced tokens
@function _generate-tokens($systems, $include-non-systemized: false) {
  $systems: map.merge((
    md-sys-color: (),
    md-sys-elevation: (),
    md-sys-motion: (),
    md-sys-shape: (),
    md-sys-state: (),
    md-sys-typescale: ()
  ), $systems);
  $exclude-hardcoded: not $include-non-systemized;

  // DO NOT REMOVE
  // This function is used internally.
  $systems: format-tokens.private-format-tokens($systems);
  $token-slots: _get-token-slots();

  // TODO(mmalerba): Fill in remaining tokens.
  $result: mat.private-deep-merge-all(
    // Add the system color & typography tokens (so we can give users access via an API).
    (
      (mdc, theme): map.get($systems, md-sys-color),
      (mdc, typography): map.get($systems, md-sys-typescale),
    ),
    m3.get-m3-tokens($systems, $exclude-hardcoded, $token-slots),
  );

  // Strip out tokens that are systemized by our made up density system.
  @each $namespace, $tokens in $result {
    @each $token, $value in $tokens {
      @if density.is-systemized($namespace, $token) {
        $tokens: map.remove($tokens, $token);
      }
    }
    $result: map.set($result, $namespace, $tokens);
  }
  @return $result;
}

/// Generates a set of namespaced color tokens for all components.
/// @param {String} $type The type of theme system (light or dark)
/// @param {Map} $primary The primary palette
/// @param {Map} $tertiary The tertiary palette
/// @param {Map} $error The error palette
/// @return {Map} A map of namespaced color tokens
@function generate-color-tokens($type, $primary, $tertiary, $error) {
  $ref: (
    md-ref-palette: _generate-ref-palette-tokens($primary, $tertiary, $error)
  );
  $sys-color: if($type == dark,
    mdc-tokens.md-sys-color-values-dark($ref),
    mdc-tokens.md-sys-color-values-light($ref));
  @return _generate-tokens(map.merge($ref, (
    md-sys-color: $sys-color,
    // Because the elevation values are always combined with color values to create the box shadow,
    // elevation needs to be part of the color dimension.
    md-sys-elevation: mdc-tokens.md-sys-elevation-values(),
    // Because the state values are sometimes combined with color values to create rgba colors,
    // state needs to be part of color dimension.
    // TODO(mmalerba): If at some point we remove the need for these combined values, we can move
    //  state to the base dimension.
    md-sys-state: mdc-tokens.md-sys-state-values(),
  )));
}

/// Generates a set of namespaced color tokens for all components.
/// @param {String|List} $brand The brand font-family
/// @param {String|List} $plain The plain fort-family
/// @param {String|Number} $bold The bold font-weight
/// @param {String|Number} $medium The medium font-weight
/// @param {String|Number} $regular The regular font-weight
/// @return {Map} A map of namespaced typography tokens
@function generate-typography-tokens($brand, $plain, $bold, $medium, $regular) {
  $ref: (
    md-ref-typeface: _generate-ref-typeface-tokens($brand, $plain, $bold, $medium, $regular)
  );
  @return _generate-tokens((
    md-sys-typescale: mdc-tokens.md-sys-typescale-values($ref)
  ));
}

/// Generates a set of namespaced density tokens for all components.
/// @param {String|Number} $scale The regular font-weight
/// @return {Map} A map of namespaced density tokens
@function generate-density-tokens($scale) {
  @return density.get-tokens-for-scale($scale);
}

/// Generates a set of namespaced tokens not related to color, typography, or density for all
/// components.
/// @return {Map} A map of namespaced tokens not related to color, typography, or density
@function generate-base-tokens() {
  // TODO(mmalerba): Exclude density tokens once implemented.
  @return _generate-tokens((
    md-sys-motion: mdc-tokens.md-sys-motion-values(),
    md-sys-shape: mdc-tokens.md-sys-shape-values(),
  ), $include-non-systemized: true);
}
